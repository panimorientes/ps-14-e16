package homePage;

import java.awt.BorderLayout;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Scanner;
import java.util.Vector;

import javax.swing.JPanel;

import profilePage.ProfileCenterPage;
import coctailPage.CenterCoctailPanel;

import common.SearchFieldPanel;
import common.ShopPagePanel;

import connection.ConnectionPool;
import connection.DataBaseNames;
import connection.DataManager;

public class SearchResultPage extends JPanel {

	private int pagNum;
	private CenterPagePanel myCenterPanel;
	private SearchFieldPanel fieldP;
	private int nCoc;
	private ShopPagePanel shopP;
	private PageNumberManager pageNumbers;
	private CenterCoctailPanel showCoctailPage;
	private ProfileCenterPage profilePage;
	private String query;

	public SearchResultPage() {

		query = DataManager.getQuery(DataManager.SELECT,
				DataManager.SELECT_ALL, DataBaseNames.COCTAIL_TABLE);
		this.myCenterPanel = new CenterPagePanel(1, this, query);
		this.profilePage = new ProfileCenterPage(this);

		this.setLayout(new BorderLayout());
		pagNum = 1;
		setNumberOfCoctails();
		this.fieldP = new SearchFieldPanel(this);
		this.shopP = new ShopPagePanel(this);

		this.add(myCenterPanel, BorderLayout.CENTER);
		this.add(fieldP, BorderLayout.NORTH);
		pageNumbers = (new PageNumberManager(this));
		this.add(pageNumbers, BorderLayout.SOUTH);
		this.add(shopP, BorderLayout.EAST);

	}

	/**
	 * Return the number of coctails
	 * 
	 * @return, the number of coctails
	 */
	public int getNumberCoctails() {
		return nCoc;
	}

	/**
	 * Sets to the private attribute nCoc the nuber total of coctails from DB
	 */
	private void setNumberOfCoctails() {
		String scannerString = query,nextWord,countQuery;
		Scanner sc = new Scanner(scannerString);
		boolean stop = false;
		while(!stop && sc.hasNext()){
			nextWord = sc.next();
			if(DataManager.FROM.contains(nextWord)){
				stop=true;
			}
		}
		countQuery = DataManager.getQuery(DataManager.SELECT, DataManager.SELECT_COUNT, sc.nextLine());
		sc.close();

		try {
			Connection c = ConnectionPool.getConnection();
			Statement st = c.createStatement();
//			String countQuery = query.substring(8);
//			countQuery = "SELECT count(*)" + countQuery;
			System.out.println(countQuery);
			ResultSet rs = st.executeQuery(countQuery);
			
			while (rs.next()) {
				nCoc = rs.getInt(1);

			}
			rs.close();
			st.close();
			ConnectionPool.returnConnection(c);
		} catch (SQLException e) {
			e.printStackTrace();
			System.out.println("error SearchResult getin nCOC");
		}
		
	}

	/***
	 * Change the page of the coctails
	 * 
	 * @param n
	 *            the new page to go
	 */
	public void changePag(int n) {

		if (showCoctailPage != null)
			this.remove(showCoctailPage);
		this.remove(myCenterPanel);
		this.remove(pageNumbers);
		setNumberOfCoctails();
		pageNumbers = (new PageNumberManager(this));
		this.add(pageNumbers, BorderLayout.SOUTH);
		myCenterPanel = new CenterPagePanel(n, this, query);
		this.add(myCenterPanel, BorderLayout.CENTER);
		this.repaint();
		this.validate();
	}

	/**
	 * Return in wich number of page im
	 * 
	 * @return the number of my page
	 */
	public int getPag() {
		return pagNum;
	}

	/**
	 * Shows in the home page the full info coctailpanel
	 * 
	 * @param coctail
	 *            coctail to show
	 */
	public void goToCoctail(String coctail) {
		this.remove(profilePage);
		this.remove(myCenterPanel);
		this.remove(pageNumbers);
		showCoctailPage = (new CenterCoctailPanel(coctail, this));
		this.add(showCoctailPage, BorderLayout.CENTER);
		this.validate();
		this.repaint();
	}

	/**
	 * return to home page
	 */
	public void goToHome() {
		this.remove(profilePage);
		if (showCoctailPage != null) {
			this.remove(showCoctailPage);
		}

		this.add(myCenterPanel, BorderLayout.CENTER);
		this.add(pageNumbers, BorderLayout.SOUTH);
		this.validate();
		this.repaint();
	}

	/**
	 * shows in the home page the full shop info
	 */
	public void goToShop() {
		if (showCoctailPage != null) {
			this.remove(showCoctailPage);
		}
		this.remove(myCenterPanel);
		this.remove(pageNumbers);
		this.add(profilePage, BorderLayout.CENTER);
		this.validate();
		this.repaint();
	}

	/**
	 * add a coctail to the shop.
	 * 
	 * @param name
	 *            coctail to be added
	 */
	public void addToShop(String name) {
		shopP.addToShop(name, getPrice(name));
		this.validate();
		this.repaint();
	}

	/**
	 * get the price from the coctail with name name Get the price from a query
	 * to the DB
	 * 
	 * @param name
	 *            of the coctail
	 * @return the price of the coctail
	 */
	private double getPrice(String name) {
		double price = 0;
		
		String query = DataManager.getQueryWhere(DataManager.SELECT,
				DataBaseNames.COCTAIL_COLUM_PRICE, DataBaseNames.COCTAIL_TABLE,
				DataManager.getDBConditionName(DataBaseNames.COCTAIL_COLUM_NAME,name));
		Vector<String> data = DataManager.getData(query,
				DataManager.getColumns(DataBaseNames.COCTAIL_COLUM_PRICE));

		price = Double.parseDouble(data.firstElement());
		
		return price;

		
	}

	/**
	 * Set a new query and update the page with the new queryy
	 * 
	 * @param query
	 *            , the new qquery
	 */
	public void updateQuery(String query) {
		this.query = query;
		this.changePag(1);

	}

}
