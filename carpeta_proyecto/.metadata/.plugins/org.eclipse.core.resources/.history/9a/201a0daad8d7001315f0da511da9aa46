package coctailPage;

import homePage.SearchResultPage;

import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Vector;

import javax.imageio.ImageIO;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextArea;

import main.NinjaFrame;
import connection.DataBaseNames;
import connection.DataManager;

public class CenterCoctailPanel extends JPanel {

	private static final String INGREDIENT_LIST_SEPARATOR = "· ";

	private static final String INGREDIENT_LIST_LABEL = "Lista de Ingredientes:";

	private static final String ARIAL_FONT = "Arial";

	private static final String PRICE_LABEL = "Precio: ";

	private static final String BTN_ADD_NAME = "Anhadir al carrito";

	private String name;
	private JPanel centerInfo, allTheInfo, ingrPanel;
	private JButton buyMe;
	private SearchResultPage searchPage;

	/**
	 * Constructor method.
	 * 
	 * @param name
	 *            , name used to search in the DB
	 */
	public CenterCoctailPanel(final String name, SearchResultPage sp) {

		searchPage = sp;
		this.name = name;
		centerInfo = new JPanel();
		centerInfo.setLayout(new BorderLayout());
		allTheInfo = new JPanel();
//		allTheInfo.setLayout(new BoxLayout(allTheInfo, BoxLayout.Y_AXIS));
		allTheInfo.setLayout(new BorderLayout());
		buyMe = new JButton(BTN_ADD_NAME);

		this.buyMe.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent arg0) {
				searchPage.addToShop(name);
			}
		});

		this.buyMe.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent arg0) {

			}

			@Override
			public void mouseEntered(MouseEvent arg0) {
				setCursor(NinjaFrame.handCursor);
			}

			@Override
			public void mouseExited(MouseEvent arg0) {
				setCursor(NinjaFrame.defaultCursor);
			}

			@Override
			public void mousePressed(MouseEvent arg0) {

			}

			@Override
			public void mouseReleased(MouseEvent arg0) {

			}

		});

		centerInfo.add(buyMe, BorderLayout.SOUTH);
		centerInfo.add(allTheInfo, BorderLayout.CENTER);

		this.setLayout(new BorderLayout());
		JPanel titleP = new JPanel();
		JLabel nameLabel = new JLabel(this.name);
		nameLabel.setFont(new Font(ARIAL_FONT, Font.BOLD, 42));
		titleP.add(nameLabel);
		this.add(titleP, BorderLayout.NORTH);
		this.add(centerInfo, BorderLayout.CENTER);
		addImg();
		addDescr();
		addIngr();
		addPrice();

	}

	/**
	 * add the price to the panel. Get the price from a query to the DB
	 */
	private void addPrice() {

		String query = DataManager.getQueryWhere(DataManager.SELECT,
				DataBaseNames.COCTAIL_COLUM_PRICE, DataBaseNames.COCTAIL_TABLE,
				DataManager.getDBConditionName(
						DataBaseNames.COCTAIL_COLUM_NAME, this.name));
		Vector<String> d = DataManager.getData(query,
				DataManager.getColumns(DataBaseNames.COCTAIL_COLUM_PRICE));

		JLabel priceL = new JLabel(PRICE_LABEL + d.firstElement());
		priceL.setFont(new Font(ARIAL_FONT, Font.ITALIC, 28));
		ingrPanel.add(new JLabel(""));
		ingrPanel.add(priceL);

	}

	/**
	 * add the coctail image to the left side of the panel. Get the path to the
	 * image from a query to the DB.
	 */
	private void addImg() {
		String img = "";
		String query = DataManager.getQueryWhere(DataManager.SELECT,
				DataBaseNames.COCTAIL_COLUM_PATH_IMG,
				DataBaseNames.COCTAIL_TABLE, DataManager.getDBConditionName(
						DataBaseNames.COCTAIL_COLUM_NAME, this.name));
		Vector<String> data = DataManager.getData(query,
				DataManager.getColumns(DataBaseNames.COCTAIL_COLUM_PATH_IMG));
		img = data.firstElement();

		JPanel panel = new JPanel((LayoutManager) new FlowLayout(
				FlowLayout.CENTER));

		try {
			BufferedImage myPicture = ImageIO.read(new File(img));
			panel.add(new JLabel(new ImageIcon(myPicture.getScaledInstance(300,
					300, Image.SCALE_SMOOTH))));

		} catch (IOException e) {
			System.out.println("error BufferedImage CencerCoctail Panel");
		}

		panel.validate();
		panel.repaint();
		this.add(panel, BorderLayout.WEST);
	}

	/**
	 * add a list of ingredients. Get the list from a query to the DB
	 */
	private void addIngr() {
		String query = DataManager.getQueryWhere(DataManager.SELECT,
				DataBaseNames.PERTAIN_COLUM_INGREDIENT,
				DataBaseNames.PERTAIN_TABLE, DataManager.getDBConditionName(
						DataBaseNames.PERTAIN_COLUM_COCTAIL, this.name));
		JLabel ingrL = new JLabel(INGREDIENT_LIST_LABEL);
		ingrL.setFont(new Font(ARIAL_FONT, Font.ITALIC, 28));
//		allTheInfo.add(ingrL);
		ingrPanel = new JPanel();
		ingrPanel.setLayout(new BoxLayout(ingrPanel,BoxLayout.Y_AXIS));
		ingrPanel.add(ingrL);

		Vector<String> data = DataManager.getData(query,
				DataManager.getColumns(DataBaseNames.PERTAIN_COLUM_INGREDIENT));

		for (String ingr : data) {
			ingrL = new JLabel(INGREDIENT_LIST_SEPARATOR + ingr);
			ingrL.setFont(new Font(ARIAL_FONT, Font.ITALIC, 22));
			ingrPanel.add(ingrL);
		}
		allTheInfo.add(ingrPanel,BorderLayout.CENTER);
	}

	/**
	 * add the desription of the coctail. Get the description from a query to
	 * the DB
	 */
	private void addDescr() {
		String descr = "";
		String query = DataManager.getQueryWhere(DataManager.SELECT,
				DataBaseNames.COCTAIL_COLUM_DESCR, DataBaseNames.COCTAIL_TABLE,
				DataManager.getDBConditionName(
						DataBaseNames.COCTAIL_COLUM_NAME, this.name));
		Vector<String> data = DataManager.getData(query,
				DataManager.getColumns(DataBaseNames.COCTAIL_COLUM_DESCR));

		descr = data.firstElement();

		JTextArea descrJTA = new JTextArea(descr+"\n");
		
		descrJTA.setEditable(false);
		descrJTA.setBackground(null);
		descrJTA.setFocusable(false);
		descrJTA.setLineWrap(true);
		descrJTA.setWrapStyleWord(true);
		descrJTA.setFont(new Font(ARIAL_FONT, Font.PLAIN, 18));
		allTheInfo.add(descrJTA,BorderLayout.NORTH);
	}

}
